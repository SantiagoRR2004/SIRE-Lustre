node SEMAFOROTRES(carSensor1, carSensor2:bool) returns (GREEN, YELLOW, RED, GREEN2, YELLOW2, RED2, GREEN3, YELLOW3, RED3: bool);
-- Las primeras luces es el semáforo principal, el 2 es del sensor de la izquierda, y las terceras de la vía secundaria de la derecha.
    var Fase, preFase: int; 
    var prioridadIzq: bool;
let
    preFase = 0 -> pre(Fase);
    Fase = 
        if false -> ((pre(carSensor1) or pre(carSensor2)) and pre(GREEN)) then 1
        else
            if 0 < preFase and preFase < 8 then preFase + 1
            else 0;

    -- le damos prioridad a la via secundario de la izquierda
    -- le damos prioridad a esta via si fue la que activó el cambio de fase, independientemente de que hubiera o no un coche en la otra via.
    -- la prioridad se mantiene hasta que se reinicie la Fase
    prioridadIzq = false -> (Fase = 1 and pre(carSensor1)) or (pre(prioridadIzq) and Fase > 1);

    GREEN = Fase = 0; --Hasta que no se detecte un coche (se pase a Fase 1), está en verde.
    YELLOW = Fase = 1;
    RED = Fase > 1;  --Hasta que no se reinicie, en rojo.

    -- Si no tiene la prioridad el lado izquierdo, el semáforo seguirá en rojo
    GREEN2 = Fase >= 3 and Fase <= 6 and prioridadIzq; -- Verde durante 4 fases. se activa un ciclo después de que el otro se pusiera en rojo.
    YELLOW2 = Fase = 7 and prioridadIzq;
    RED2 = Fase < 3 or Fase = 8 or not(prioridadIzq); -- Está en rojo si el principal está en verde o amarillo y un segundo después de que el otro se ponga a rojo
    --[or Fase = 8] sirve para que esté un segundo en rojo antes de que se ponga en verde el principal.

    -- Si el lado izquierdo no tiene la prioridad podrá circular el lado derecho:
    GREEN3 = not(prioridadIzq) and Fase >=3 and Fase <=6;
    YELLOW3 = not(prioridadIzq) and Fase = 7;
    RED3 = prioridadIzq or Fase <3 or Fase = 8;
    
    -- No pueden estar en verde al mismo tiempo
    assert not (GREEN and GREEN2);
    assert not (GREEN and GREEN3);
    assert not (GREEN2 and GREEN3);
tel